import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Relat√≥rio de Distribui√ß√£o de Cargos por N√≠vel",
    layout="wide",
    page_icon="üìä"
)

# Cabe√ßalho estilizado
st.markdown("""
<div style="background-color: #2c2c2c; padding: 2rem; border-radius: 8px; text-align: center; margin-bottom: 2rem;">
    <h1 style="color: #ffffff; font-size: 3rem;">üìä Relat√≥rio: Distribui√ß√£o de Cargos por N√≠vel</h1>
    <p style="color: #a9a9a9; font-size: 1.5rem;">An√°lise detalhada da distribui√ß√£o de cargos organizacionais</p>
</div>
""", unsafe_allow_html=True)

# Fun√ß√£o de an√°lise
def analisar_distribuicao_cargos_por_nivel(dados):
    if 'Position' not in dados.columns or 'Level' not in dados.columns:
        raise ValueError("Erro: O DataFrame deve conter as colunas 'Position' e 'Level'.")
    
    # Contar a quantidade de cargos por n√≠vel
    distribuicao_cargos = dados.groupby('Level')['Position'].count().reset_index()
    distribuicao_cargos.columns = ['Level', 'Quantidade de Cargos']
    
    # Identificar os n√≠veis com maior e menor concentra√ß√£o de cargos
    nivel_mais_cargos = distribuicao_cargos.loc[distribuicao_cargos['Quantidade de Cargos'].idxmax()]
    nivel_menos_cargos = distribuicao_cargos.loc[distribuicao_cargos['Quantidade de Cargos'].idxmin()]
    
    # Gr√°fico de barras horizontal com tons escuros
    bar_chart = px.bar(
        distribuicao_cargos, x='Quantidade de Cargos', y='Level',
        title="Distribui√ß√£o de Cargos por N√≠vel",
        text='Quantidade de Cargos', orientation='h', color='Level',
        color_discrete_sequence=px.colors.sequential.Darkmint  # Paleta escura
    )
    bar_chart.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    bar_chart.update_layout(
        xaxis_title="Quantidade de Cargos", 
        yaxis_title="N√≠vel", 
        plot_bgcolor="#1c1c1c",
        paper_bgcolor="#1c1c1c",
        font=dict(color="#ffffff"),
        title_font=dict(color="#ffffff")
    )
    
    # Constru√ß√£o de insights
    insights = {
        "Resumo": "A an√°lise destaca os n√≠veis organizacionais com maior e menor concentra√ß√£o de cargos.",
        "Observa√ß√µes": [
            f"O n√≠vel com maior concentra√ß√£o de cargos √© '{nivel_mais_cargos['Level']}' com {nivel_mais_cargos['Quantidade de Cargos']} cargos.",
            f"O n√≠vel com menor concentra√ß√£o de cargos √© '{nivel_menos_cargos['Level']}' com {nivel_menos_cargos['Quantidade de Cargos']} cargos."
        ],
        "Recomenda√ß√µes": [
            "Avalie se os n√≠veis com maior concentra√ß√£o de cargos est√£o sobrecarregados e redistribua recursos se necess√°rio.",
            "Considere refor√ßar os n√≠veis com menor concentra√ß√£o de cargos por meio de novas contrata√ß√µes ou reestrutura√ß√£o.",
            "Implemente estrat√©gias de treinamento para preparar funcion√°rios para transi√ß√µes entre n√≠veis."
        ]
    }
    
    return bar_chart, insights

# Entrada de dados
CAMINHO_DADOS = '../data/processed/salary_atualizado.csv'

try:
    dados = pd.read_csv(CAMINHO_DADOS)
    
    with st.spinner("Carregando os dados e gerando an√°lise..."):
        bar_chart, insights = analisar_distribuicao_cargos_por_nivel(dados)
    
    # Exibi√ß√£o do gr√°fico
    st.plotly_chart(bar_chart, use_container_width=True)
    
    # Layout inovador e clean para exibi√ß√£o dos blocos de informa√ß√µes
    st.markdown(f"""
    <div style="background-color: #3a3a3a; padding: 2rem; border-radius: 8px; margin-bottom: 2rem;">
        <h2 style="color: #ffffff; font-size: 2rem;">Resumo</h2>
        <p style="color: #d3d3d3; font-size: 1.3rem; line-height: 1.8;">
            {insights["Resumo"]}
        </p>
    </div>

    <div style="background-color: #3a3a3a; padding: 2rem; border-radius: 8px; margin-bottom: 2rem;">
        <h2 style="color: #ffffff; font-size: 2rem;">Observa√ß√µes</h2>
        <p style="color: #d3d3d3; font-size: 1.3rem; line-height: 1.8;">
            - {insights["Observa√ß√µes"][0]}<br>
            - {insights["Observa√ß√µes"][1]}
        </p>
    </div>

    <div style="background-color: #3a3a3a; padding: 2rem; border-radius: 8px; margin-bottom: 2rem;">
        <h2 style="color: #ffffff; font-size: 2rem;">Recomenda√ß√µes</h2>
        <p style="color: #d3d3d3; font-size: 1.3rem; line-height: 1.8;">
            - {insights["Recomenda√ß√µes"][0]}<br>
            - {insights["Recomenda√ß√µes"][1]}<br>
            - {insights["Recomenda√ß√µes"][2]}
        </p>
    </div>
    """, unsafe_allow_html=True)

except FileNotFoundError:
    st.error("Erro: Arquivo de dados n√£o encontrado!")
except Exception as e:
    st.error(f"Erro ao realizar a an√°lise: {e}")